export interface StandardizedVulnerability {
  cveId: string;
  severity: string;
  description: string;
  score: number | null;
  cvssVector: string | null;
  cwes: string[] | null;
  
  // Additional fields for threat mapping
  threatType?: string;
  threatCategories?: string[];
  riskLevel?: string;
}

export interface ThreatMappingContext {
  primaryThreatType: string;
  confidence: number;
  reasoning: string[];
  alternativeTypes: string[];
}

export class VulnerabilityStandardizer {
  private cweToThreatMapping: Map<string, string[]> = new Map();
  private keywordToThreatMapping: Map<string, string[]> = new Map();

  constructor() {
    this.initializeMappings();
  }

  private initializeMappings() {
    // CWE to STRIDE threat type mappings
    this.cweToThreatMapping.set('CWE-79', ['Tampering', 'Information Disclosure']); // XSS
    this.cweToThreatMapping.set('CWE-89', ['Tampering', 'Information Disclosure']); // SQL Injection
    this.cweToThreatMapping.set('CWE-287', ['Spoofing']); // Authentication bypass
    this.cweToThreatMapping.set('CWE-285', ['Elevation of Privilege']); // Authorization
    this.cweToThreatMapping.set('CWE-200', ['Information Disclosure']); // Info exposure
    this.cweToThreatMapping.set('CWE-400', ['Denial of Service']); // Resource exhaustion
    this.cweToThreatMapping.set('CWE-352', ['Tampering']); // CSRF
    this.cweToThreatMapping.set('CWE-502', ['Tampering', 'Elevation of Privilege']); // Deserialization
    this.cweToThreatMapping.set('CWE-22', ['Tampering', 'Information Disclosure']); // Path Traversal
    this.cweToThreatMapping.set('CWE-78', ['Tampering', 'Elevation of Privilege']); // Command Injection
    this.cweToThreatMapping.set('CWE-94', ['Tampering', 'Elevation of Privilege']); // Code Injection
    this.cweToThreatMapping.set('CWE-434', ['Tampering']); // File Upload
    this.cweToThreatMapping.set('CWE-798', ['Spoofing', 'Information Disclosure']); // Hard-coded Credentials
    this.cweToThreatMapping.set('CWE-327', ['Information Disclosure']); // Weak Crypto
    this.cweToThreatMapping.set('CWE-311', ['Information Disclosure']); // Missing Encryption
    
    // Keyword to threat type mappings
    this.keywordToThreatMapping.set('authentication', ['Spoofing']);
    this.keywordToThreatMapping.set('authorization', ['Elevation of Privilege']);
    this.keywordToThreatMapping.set('injection', ['Tampering', 'Information Disclosure']);
    this.keywordToThreatMapping.set('xss', ['Tampering', 'Information Disclosure']);
    this.keywordToThreatMapping.set('csrf', ['Tampering']);
    this.keywordToThreatMapping.set('disclosure', ['Information Disclosure']);
    this.keywordToThreatMapping.set('denial', ['Denial of Service']);
    this.keywordToThreatMapping.set('privilege', ['Elevation of Privilege']);
    this.keywordToThreatMapping.set('logging', ['Repudiation']);
    this.keywordToThreatMapping.set('audit', ['Repudiation']);
    this.keywordToThreatMapping.set('crypto', ['Information Disclosure']);
    this.keywordToThreatMapping.set('encryption', ['Information Disclosure']);
    this.keywordToThreatMapping.set('password', ['Spoofing', 'Information Disclosure']);
    this.keywordToThreatMapping.set('credential', ['Spoofing', 'Information Disclosure']);
    this.keywordToThreatMapping.set('session', ['Spoofing', 'Tampering']);
    this.keywordToThreatMapping.set('buffer', ['Tampering', 'Denial of Service']);
    this.keywordToThreatMapping.set('overflow', ['Tampering', 'Denial of Service']);
    this.keywordToThreatMapping.set('underflow', ['Tampering']);
    this.keywordToThreatMapping.set('race', ['Tampering']);
    this.keywordToThreatMapping.set('path', ['Tampering', 'Information Disclosure']);
    this.keywordToThreatMapping.set('traversal', ['Tampering', 'Information Disclosure']);
    this.keywordToThreatMapping.set('upload', ['Tampering']);
    this.keywordToThreatMapping.set('download', ['Information Disclosure']);
  }

  public standardizeVulnerability(rawVuln: any, scannerType: string): StandardizedVulnerability {
    // Convert basic vulnerability data to standardized format
    const basicStandardized: StandardizedVulnerability = {
      cveId: rawVuln.cveId || rawVuln.id || 'UNKNOWN',
      severity: rawVuln.severity || 'Unknown',
      description: rawVuln.description || rawVuln.message || '',
      score: rawVuln.score || null,
      cvssVector: rawVuln.cvssVector || null,
      cwes: rawVuln.cwes || null
    };
    
    // Then enhance with threat mapping
    const threatContext = this.mapVulnerabilityToThreat(basicStandardized);
    
    return {
      ...basicStandardized,
      threatType: threatContext.primaryThreatType,
      threatCategories: [threatContext.primaryThreatType, ...threatContext.alternativeTypes],
      riskLevel: this.calculateRiskLevel(basicStandardized)
    };
  }

  private mapVulnerabilityToThreat(vuln: StandardizedVulnerability): ThreatMappingContext {
    const votes: { type: string; weight: number; reason: string }[] = [];

    // Analyze CWEs
    if (vuln.cwes && vuln.cwes.length > 0) {
      vuln.cwes.forEach(cwe => {
        const threatTypes = this.cweToThreatMapping.get(cwe);
        if (threatTypes) {
          threatTypes.forEach(type => {
            votes.push({
              type,
              weight: 3, // High weight for CWE mappings
              reason: `CWE ${cwe} commonly associated with ${type}`
            });
          });
        }
      });
    }

    // Analyze description keywords
    if (vuln.description) {
      const desc = vuln.description.toLowerCase();
      for (const [keyword, threatTypes] of this.keywordToThreatMapping.entries()) {
        if (desc.includes(keyword)) {
          threatTypes.forEach(type => {
            votes.push({
              type,
              weight: 2, // Medium weight for keyword analysis
              reason: `Description contains "${keyword}" keyword`
            });
          });
        }
      }
    }

    // Analyze severity for fallback mapping
    if (vuln.severity) {
      const severityThreatTypes = this.getSeverityBasedThreats(vuln.severity);
      severityThreatTypes.forEach(type => {
        votes.push({
          type,
          weight: 1, // Low weight for severity-based mapping
          reason: `${vuln.severity} severity commonly maps to ${type}`
        });
      });
    }

    // Calculate threat type scores
    const threatScores: Map<string, { score: number; reasons: string[] }> = new Map();
    
    votes.forEach(vote => {
      if (!threatScores.has(vote.type)) {
        threatScores.set(vote.type, { score: 0, reasons: [] });
      }
      const current = threatScores.get(vote.type)!;
      current.score += vote.weight;
      current.reasons.push(vote.reason);
    });

    // Sort by score and determine primary threat type
    const sortedThreats = Array.from(threatScores.entries())
      .sort(([,a], [,b]) => b.score - a.score);

    const primaryThreatType = sortedThreats.length > 0 ? sortedThreats[0][0] : 'Information Disclosure';
    const confidence = sortedThreats.length > 0 ? Math.min(sortedThreats[0][1].score / 5, 1) : 0.5;
    const reasoning = sortedThreats.length > 0 ? sortedThreats[0][1].reasons : [];
    const alternativeTypes = sortedThreats.slice(1, 3).map(([type]) => type);

    return {
      primaryThreatType,
      confidence,
      reasoning,
      alternativeTypes
    };
  }

  private getSeverityBasedThreats(severity: string): string[] {
    const severityMap: Record<string, string[]> = {
      'CRITICAL': ['Elevation of Privilege', 'Information Disclosure'],
      'HIGH': ['Information Disclosure', 'Denial of Service'],
      'MEDIUM': ['Tampering', 'Repudiation'],
      'LOW': ['Repudiation', 'Spoofing']
    };
    return severityMap[severity.toUpperCase()] || ['Information Disclosure'];
  }

  private calculateRiskLevel(vuln: StandardizedVulnerability): string {
    if (vuln.score === null) return 'UNKNOWN';
    
    if (vuln.score >= 9) return 'CRITICAL';
    if (vuln.score >= 7) return 'HIGH';
    if (vuln.score >= 4) return 'MEDIUM';
    return 'LOW';
  }
}

import { StandardizedVulnerability } from './vulnerabilityStandardizer';

export abstract class VulnerabilityAdapter {
  abstract adapt(rawResult: any): StandardizedVulnerability[];
  abstract getScannerType(): string;
}

// SonarQube Adapter
export class SonarQubeAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'sonarqube';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    const issues = rawResult.issues || [];
    
    return issues.map((issue: any) => ({
      cveId: this.extractCveId(issue) || issue.rule || issue.key,
      severity: this.mapSeverity(issue.severity),
      description: issue.message,
      score: this.estimateScore(issue.severity),
      cvssVector: null,
      cwes: this.extractCwes(issue.tags || [])
    }));
  }

  private mapSeverity(sonarSeverity: string): string {
    const severityMap: Record<string, string> = {
      'BLOCKER': 'Critical',
      'CRITICAL': 'Critical',
      'MAJOR': 'High',
      'MINOR': 'Medium',
      'INFO': 'Low'
    };
    return severityMap[sonarSeverity] || 'Unknown';
  }

  private extractCveId(issue: any): string | null {
    if (issue.message && issue.message.includes('CVE-')) {
      const cveMatch = issue.message.match(/CVE-\d{4}-\d{4,}/);
      return cveMatch ? cveMatch[0] : null;
    }
    return null;
  }

  private extractCwes(tags: string[]): string[] | null {
    const cweFromTags = tags.filter(tag => 
      tag.startsWith('cwe') || tag.includes('cwe') || tag.startsWith('CWE')
    );
    return cweFromTags.length > 0 ? cweFromTags : null;
  }

  private estimateScore(severity: string): number | null {
    const scoreMap: Record<string, number> = {
      'BLOCKER': 9.5,
      'CRITICAL': 8.5,
      'MAJOR': 6.0,
      'MINOR': 3.0,
      'INFO': 1.0
    };
    return scoreMap[severity] || null;
  }
}

// Trivy Adapter
export class TrivyAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'trivy';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    let vulnerabilities: StandardizedVulnerability[] = [];
    
    if (rawResult.Results) {
      for (const result of rawResult.Results) {
        if (result.Vulnerabilities) {
          const vulns = result.Vulnerabilities.map((vuln: any) => ({
            cveId: vuln.VulnerabilityID,
            severity: vuln.Severity,
            description: vuln.Description || vuln.Title,
            score: vuln.CVSS?.nvd?.V3Score || vuln.CVSS?.redhat?.V3Score || null,
            cvssVector: vuln.CVSS?.nvd?.V3Vector || vuln.CVSS?.redhat?.V3Vector || null,
            cwes: vuln.CweIDs || null
          }));
          vulnerabilities = [...vulnerabilities, ...vulns];
        }
      }
    }
    
    return vulnerabilities;
  }
}

// Grype Adapter
export class GrypeAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'grype';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    const matches = rawResult.matches || [];
    return matches.map((match: any) => ({
      cveId: match.vulnerability.id,
      severity: match.vulnerability.severity,
      description: match.vulnerability.description,
      score: match.vulnerability.cvss?.[0]?.metrics?.baseScore || null,
      cvssVector: match.vulnerability.cvss?.[0]?.vector || null,
      cwes: match.vulnerability.cwe || null
    }));
  }
}

// OWASP ZAP Adapter
export class ZapAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'zap';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    const alerts = rawResult.site?.[0]?.alerts || [];
    return alerts.map((alert: any) => ({
      cveId: alert.cweid ? `CWE-${alert.cweid}` : `ZAP-${alert.pluginid}`,
      severity: this.mapRiskToSeverity(alert.riskdesc),
      description: alert.desc,
      score: null,
      cvssVector: null,
      cwes: alert.cweid ? [`CWE-${alert.cweid}`] : null
    }));
  }

  private mapRiskToSeverity(riskDesc: string): string {
    if (riskDesc.includes('High')) return 'High';
    if (riskDesc.includes('Medium')) return 'Medium';
    if (riskDesc.includes('Low')) return 'Low';
    return 'Unknown';
  }
}

// Bandit Adapter (for Python security scanning)
export class BanditAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'bandit';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    const results = rawResult.results || [];
    return results.map((result: any) => ({
      cveId: result.test_id || `BANDIT-${result.test_name}`,
      severity: this.mapConfidenceToSeverity(result.issue_confidence),
      description: result.issue_text,
      score: this.mapSeverityToScore(result.issue_severity),
      cvssVector: null,
      cwes: result.issue_cwe_id ? [`CWE-${result.issue_cwe_id}`] : null
    }));
  }

  private mapConfidenceToSeverity(confidence: string): string {
    const severityMap: Record<string, string> = {
      'HIGH': 'High',
      'MEDIUM': 'Medium',
      'LOW': 'Low'
    };
    return severityMap[confidence] || 'Unknown';
  }

  private mapSeverityToScore(severity: string): number | null {
    const scoreMap: Record<string, number> = {
      'HIGH': 7.0,
      'MEDIUM': 5.0,
      'LOW': 3.0
    };
    return scoreMap[severity] || null;
  }
}

// Semgrep Adapter
export class SemgrepAdapter extends VulnerabilityAdapter {
  getScannerType(): string {
    return 'semgrep';
  }

  adapt(rawResult: any): StandardizedVulnerability[] {
    const results = rawResult.results || [];
    return results.map((result: any) => ({
      cveId: result.check_id,
      severity: this.mapSemgrepSeverity(result.extra?.severity),
      description: result.extra?.message || result.message,
      score: this.mapSeverityToScore(result.extra?.severity),
      cvssVector: null,
      cwes: result.extra?.metadata?.cwe ? [`CWE-${result.extra.metadata.cwe}`] : null
    }));
  }

  private mapSemgrepSeverity(severity: string): string {
    const severityMap: Record<string, string> = {
      'ERROR': 'High',
      'WARNING': 'Medium',
      'INFO': 'Low'
    };
    return severityMap[severity] || 'Unknown';
  }

  private mapSeverityToScore(severity: string): number | null {
    const scoreMap: Record<string, number> = {
      'ERROR': 6.0,
      'WARNING': 4.0,
      'INFO': 2.0
    };
    return scoreMap[severity] || null;
  }
}

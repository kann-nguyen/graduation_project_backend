{
  "sql-injection": {
    "title": "Implement Parameterized Queries",
    "description": "Prevent SQL Injection vulnerabilities",
    "implementation": "Replace dynamic SQL queries with parameterized queries or prepared statements. Use an ORM (Object-Relational Mapping) framework when possible. If direct queries are necessary, ensure all user inputs are properly escaped and validated. Apply the principle of least privilege to database accounts.",
    "securityControls": ["Parameterized Queries", "Input Validation", "Database Least Privilege"]
  },
  "xss": {
    "title": "Implement Context-Aware Output Encoding",
    "description": "Prevent Cross-Site Scripting (XSS) attacks",
    "implementation": "Implement context-specific output encoding for all user-controlled data. Sanitize data at the point of input and storage for persistent XSS. Deploy Content Security Policy (CSP) headers with appropriate directives. Consider using modern frameworks with built-in XSS protections.",
    "securityControls": ["Output Encoding", "Content Security Policy", "Input Sanitization"]
  },
  "command-injection": {
    "title": "Use Safe Command Execution",
    "description": "Prevent operating system command injection",
    "implementation": "Avoid using shell commands with user-supplied input. If necessary, use library functions that allow separate command and argument specification (like execFile instead of exec). Implement an allowlist of permitted commands and arguments. Consider alternatives to direct OS command execution when possible.",
    "securityControls": ["Safe Command APIs", "Input Allowlisting", "Alternative Implementations"]
  },
  "path-traversal": {
    "title": "Implement Path Canonicalization and Validation",
    "description": "Prevent directory traversal attacks",
    "implementation": "Canonicalize file paths before validation. Use path validation libraries to ensure safe file access. Implement a virtual file path mapping that doesn't directly expose the file system. Never pass user input directly to file system APIs.",
    "securityControls": ["Path Canonicalization", "Virtual File Paths", "Input Validation"]
  },
  "authentication": {
    "title": "Strengthen Authentication Controls",
    "description": "Fix authentication vulnerabilities",
    "implementation": "Implement multi-factor authentication for sensitive operations. Use established authentication frameworks rather than custom implementations. Implement proper session management with secure cookies. Ensure credentials are stored securely using modern hashing algorithms with salting.",
    "securityControls": ["Authentication Frameworks", "MFA", "Secure Session Management"]
  },
  "authorization": {
    "title": "Implement Proper Authorization Checks",
    "description": "Fix broken access control issues",
    "implementation": "Implement centralized, server-side access control that validates permissions on every request. Use role-based access control (RBAC) or attribute-based access control (ABAC) as appropriate. Apply the principle of deny-by-default and verify direct object references.",
    "securityControls": ["Centralized Authorization", "RBAC/ABAC", "Object Reference Checks"]
  },
  "csrf": {
    "title": "Implement Anti-CSRF Tokens",
    "description": "Prevent Cross-Site Request Forgery attacks",
    "implementation": "Add anti-CSRF tokens to all state-changing operations and validate them server-side. Ensure cookies use the SameSite attribute (Strict or Lax). For AJAX calls, implement custom request headers that simple requests cannot set.",
    "securityControls": ["Anti-CSRF Tokens", "SameSite Cookies", "Custom Request Headers"]
  },
  "ssrf": {
    "title": "Implement URL Validation and Request Control",
    "description": "Prevent Server-Side Request Forgery (SSRF) attacks",
    "implementation": "Validate and sanitize all URLs before making server-side requests. Use an allowlist of permitted domains and IP ranges. Implement network-level controls to prevent access to internal resources. Consider deploying a dedicated HTTP proxy for outbound requests.",
    "securityControls": ["URL Validation", "Network Segmentation", "Outbound Proxy"]
  },
  "deserialization": {
    "title": "Implement Secure Deserialization Controls",
    "description": "Prevent insecure deserialization attacks",
    "implementation": "Avoid deserializing user-controlled data entirely if possible. Use safer data formats like JSON with schema validation instead of native serialization formats. If native deserialization is required, implement a strict allowlist approach and consider using serialization proxies.",
    "securityControls": ["Data Format Selection", "Deserialization Filtering", "Schema Validation"]
  },
  "xxe": {
    "title": "Disable XML External Entities",
    "description": "Prevent XML External Entity (XXE) attacks",
    "implementation": "Disable XML external entity processing in all XML parsers. Use the latest version of XML processing libraries with secure defaults. If DTDs are required, consider using a local DTD catalog to resolve entities locally.",
    "securityControls": ["XXE Disablement", "Updated XML Libraries", "Local DTD Catalog"]
  },
  "crypto": {
    "title": "Update Cryptographic Implementation",
    "description": "Address cryptographic vulnerabilities",
    "implementation": "Replace deprecated/weak algorithms (MD5, SHA-1, DES, etc.) with modern alternatives. Use recommended key sizes for all cryptographic operations. Consider using vetted cryptographic libraries rather than custom implementations. Implement proper key management with secure storage and rotation.",
    "securityControls": ["Modern Algorithms", "Adequate Key Sizes", "Vetted Libraries", "Key Management"]
  },
  "info-exposure": {
    "title": "Implement Information Exposure Controls",
    "description": "Prevent sensitive data exposure",
    "implementation": "Implement proper error handling that doesn't expose sensitive details. Remove debugging information from production environments. Ensure sensitive data is properly classified and protected both in transit and at rest. Apply the principle of least privilege for data access.",
    "securityControls": ["Secure Error Handling", "Data Classification", "Encryption", "Least Privilege"]
  },
  "resource-management": {
    "title": "Implement Resource Management Controls",
    "description": "Prevent resource exhaustion and denial of service",
    "implementation": "Implement rate limiting for all external-facing endpoints. Add timeouts for long-running operations. Set appropriate resource quotas and monitor resource usage. Consider implementing auto-scaling for critical services.",
    "securityControls": ["Rate Limiting", "Timeouts", "Resource Quotas", "Auto-scaling"]
  },
  "misconfiguration": {
    "title": "Fix Security Misconfigurations",
    "description": "Address security configuration weaknesses",
    "implementation": "Implement a secure configuration baseline for all components. Remove unnecessary features, components, and default accounts. Keep all software up-to-date with the latest security patches. Use automated configuration scanning to detect deviations from secure baseline.",
    "securityControls": ["Secure Baseline", "Minimal Attack Surface", "Patch Management", "Configuration Scanning"]
  }
}
# Use the latest LTS version of Node.js as the base image
FROM node:lts

# Set the working directory in the container
WORKDIR /app

# Run the tool installation command
RUN curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

# Clone the code repository
RUN git clone https://github.com/kann-nguyen/scanner-template-1.git .

# Replace the placeholder with implementation
RUN sed -i 's/<code_placeholder>/async function processImageScan(name) {\n  const uuid = randomUUID();\n  log(`Received scan request for image: ${name} (UUID: ${uuid})`);\n  \n  try {\n    await mkdir(".\/scan-log", { recursive: true });\n    const outputPath = `.\/scan-log\/${uuid}.json`;\n    \n    await new Promise((resolve, reject) => {\n      const command = spawn("trivy", [\n        "image",\n        `${name}`,\n        "--scanners", "vuln",\n        "--format", "json",\n        "--output", outputPath\n      ]);\n      \n      command.stdout.on("data", (data) => {\n        log(`Trivy: ${data}`);\n      });\n      \n      command.stderr.on("data", (data) => {\n        log(`Trivy Error: ${data}`, "ERROR");\n      });\n      \n      command.on("close", (code) => {\n        log(`Trivy process exited with code ${code}`);\n        if (code === 0) {\n          resolve();\n        } else {\n          reject(new Error(`Trivy exited with code ${code}`));\n        }\n      });\n    });\n    \n    const data = await readFile(outputPath, "utf8");\n    const json = JSON.parse(data);\n    let vulnerabilities = [];\n    \n    if (json.Results) {\n      for (const result of json.Results) {\n        if (result.Vulnerabilities) {\n          const vulns = await Promise.all(result.Vulnerabilities.map(async (vuln) => {\n            const vulnerability = {\n              id: vuln.VulnerabilityID,\n              severity: vuln.Severity,\n              description: vuln.Description,\n              cvss: vuln.CVSS ? [\n                {\n                  metrics: {\n                    baseScore: vuln.CVSS?.nvd?.V3Score || null\n                  },\n                  vector: vuln.CVSS?.nvd?.V3Vector || null\n                }\n              ] : [],\n              cwe: vuln.CweIDs || []\n            };\n            \n            return processVulnerability(vulnerability);\n          }));\n          \n          vulnerabilities = [...vulnerabilities, ...vulns];\n        }\n      }\n    }\n    \n    getVulnerabilityStats(vulnerabilities);\n    \n    const securityState = determineSecurityState(vulnerabilities);\n    \n    await unlink(outputPath);\n    \n    const payload = {\n      eventCode: "IMAGE_SCAN_COMPLETE",\n      imageName: name,\n      securityState,\n      data: vulnerabilities\n    };\n    \n    log(`Sending scan results to ${process.env.API_URL}\/webhook\/image`);\n    await axios.post(`${process.env.API_URL}\/webhook\/image`, payload);\n    \n    return { success: true, requestId: uuid };\n  } catch (error) {\n    log(`Error during image scan: ${error.message}`, "ERROR");\n    return { success: false, error: error.message, requestId: uuid };\n  }\n}/g' index.js

# Install dependencies
RUN npm install

# Install Prettier to format the code
RUN npm install -g prettier

# Format the code
RUN prettier --write index.js

EXPOSE 3000

# Start the server when the container is run
CMD [ "npm", "start" ]
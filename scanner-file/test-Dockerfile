# Use the latest LTS version of Node.js as the base image
FROM node:lts

# Set the working directory in the container
WORKDIR /app

# Run the tool installation command
RUN curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

# Clone the code repository
RUN git clone https://github.com/kann-nguyen/scanner-template-1.git .

ADD . ./

RUN npm install

# Replace content in index.js
RUN sed -i 's@<code_placeholder>@async function processImageScan(name) {\n  const uuid = randomUUID();\n  log(\`Received scan request for image: \${name} (UUID: \${uuid})\`);\n\n  try {\n    await mkdir(\".\\/scan-log\", { recursive: true });\n    const outputPath = \`.\\/scan-log\\/\${uuid}.json\`;\n    \n    await new Promise((resolve, reject) => {\n      const command = spawn(\"grype\", [\n        name,\n        \"-o\",\n        \"json\",\n        \"--by-cve\",\n        \"--file\",\n        outputPath\n      ]);\n\n      command.stdout.on(\"data\", (data) => {\n        log(\`Grype: \${data}\`);\n      });\n\n      command.stderr.on(\"data\", (data) => {\n        log(\`Grype Error: \${data}\`, \"ERROR\");\n      });\n\n      command.on(\"close\", (code) => {\n        log(\`Grype process exited with code \${code}\`);\n        if (code === 0) {\n          resolve();\n        } else {\n          reject(new Error(\`Grype exited with code \${code}\`));\n        }\n      });\n    });\n\n    const data = await readFile(outputPath, \"utf8\");\n    const output = JSON.parse(data);\n    const { matches } = output;\n\n    const vulnerabilities = await Promise.all(\n      matches.map(match => processVulnerability(match.vulnerability))\n    );\n\n    getVulnerabilityStats(vulnerabilities);\n    \n    const securityState = determineSecurityState(vulnerabilities);\n\n    await unlink(outputPath);\n\n    const payload = {\n      eventCode: \"IMAGE_SCAN_COMPLETE\",\n      imageName: name,\n      securityState,\n      data: vulnerabilities\n    };\n\n    log(\`Sending scan results to \${process.env.API_URL}\\/webhook\\/image\`);\n    await axios.post(\`\${process.env.API_URL}\\/webhook\\/image\`, payload);\n    return { success: true, requestId: uuid };\n  } catch (error) {\n    log(\`Error during image scan: \${error.message}\`, \"ERROR\");\n    return { success: false, error: error.message, requestId: uuid };\n  }\n}@' index.js

# Install Prettier to format the code
RUN npm install -g prettier

# Format the code
RUN prettier --write .

EXPOSE 3000

# Start the server when the container is run
CMD [ "npm", "start" ]